/****************************************************************************/
/*			 ＳＱＵＡＲＥ通信用構造体定義	ヘッダーファイル				*/
/****************************************************************************/
/*	2006/06/30													Y.Okajima	*/
/****************************************************************************/
//----------------------------------------------------------------------------
/*
 *	$Id$
 */
//----------------------------------------------------------------------------
#if !defined( __SQUARECOMM_TYPES_H__ )
#define		__SQUARECOMM_TYPES_H__

//----------------------------------------------------------------------------
/****************************************************************************/
/*	インクルードファイル													*/
/****************************************************************************/
#if !defined(_MFC_VER)
#include	<windows.h>
#endif
#include	"SquareCommDef.h"
//----------------------------------------------------------------------------
#pragma pack(push, 1)

//----------------------------------------------------------------------------
/****************************************************************************/
/*	ヘッダー部																*/
/****************************************************************************/
struct square_header_t {
	char	command[5];										// コマンド
	char	date[8];										// 日付
	char	time[6];										// 時刻
	BYTE	srcNetAddress;									// 送信元ネットワーク番号
	char	srcMachine[4];									// 送信元端末略号
	short	srcStation;										// 送信元端末番号
	char	destMachine[4];									// 送信先端末略号
	short	destStation;									// 送信先端末番号
	char	endMachine[4];									// 末端端末機種
	BYTE	endStation;										// 末端端末番号（ライン番号）
	BYTE	arcAddress;										// アークネットアドレス
	BYTE	portNo;											// ポート番号
	BYTE	week;											// 曜日
	long	length;											// データ長
	short	boardNo;										// 台番号
	char	padding2[1];									// ユーザーオプション
	BYTE	key;											// 暗号キー
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＴＭ００１電文（要求）													*/
/****************************************************************************/
struct req_tm001_t {
	char	version[8];										// バージョン番号
	char	date[8];										// 画像日付
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ００１電文（要求）													*/
/****************************************************************************/
struct req_su001_t {
	short	machineNo;										// 号機
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ００１電文（応答）号機番号〜接続機器台数							*/
/****************************************************************************/
struct ans_su001_header_t {
	short	machineNo;										// 号機
	short	jlpmcnt;										// 接続機器台数
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ００１電文（応答）アークネットアドレス〜端末種類					*/
/****************************************************************************/
struct ans_su001_kiki_info_t {
	BYTE	arcAddress;										// アークネットアドレス
	char	filler1;										// パディング
	short	boardLNo;										// 左側設置台番号
	short	boardRNo;										// 右側設置台番号
	char	machine[4];										// 端末種類
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ００１電文（応答）再プレイ投出単位〜再プレイ毎暗証番号入力			*/
/****************************************************************************/
struct ans_su001_bm_info_t {
	short	payout_unit;									// 再プレイ投出単位
	short	payout_fee;										// 再プレイ手数料単位
	BYTE	MB102_interval;									// MB102電文送信間隔
	BYTE	rpl_pass_chk;									// 再プレイ毎暗証番号入力
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ００１電文（応答）店舗運用情報バージョン〜							*/
/****************************************************************************/
struct ans_su001_data_t {
	short					shop_info_ver;					// 店舗運用情報バージョン番号
	char					comp_code[4];					// 販社コード
	char					shop_code[5];					// 店コード
	BYTE					sandKind;						// サンド情報
	ans_su001_bm_info_t		bm_info[2];						// 玉/Ｍ情報
	BYTE					discharge;						// 排出電文区分
	BYTE					boardDataType;					// 台情報電文区分
	short					boardInterval;					// 台情報電文送信間隔
	short					boardShiftInterval;				// 台情報電文号機間送信間隔
	BYTE					systemFlg;						// システムフラグ
	BYTE					alarmHitOK;						// アラーム通知（正常系:特賞）
	BYTE					alarmNormalOK;					// アラーム通知（正常系:一般）
	BYTE					alarmNG;						// アラーム通知（異常系）
	BYTE					pointDspFlg;					// ポイント表示区分	
	BYTE					reserved[9];					// 予約領域
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ００１電文（応答）													*/
/****************************************************************************/
struct ans_su001_t {
	ans_su001_header_t		header;							// データヘッダ
	ans_su001_kiki_info_t	kiki_info;						// 可変
	ans_su001_data_t		data;							// 設定データ
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ００５電文（台情報）												*/
/****************************************************************************/
struct req_su005_data_dai_t {
	BYTE	kind;											// 区分
	char	padding1[1];									// パディング１
	short	boardNo;										// 台番号（システムID）
	short	hitHistoryCount;								// 特賞履歴件数
	short	stopCount;										// 打ち止め回数
	long	outCount;										// アウト累計
	long	safeCount;										// セーフ累計
	short	hitCount;										// 特賞/BIG回数累計
	short	highProvableCount;								// 高確率/REG回数累計
	short	startCount;										// 始動数累計
	short	op1Count;										// OP1数累計
	short	op2Count;										// OP2数累計
	short	op3Count;										// OP3数累計
	long	outCounthigh;									// 高確中累計アウト数累計
	long	safeCounthigh;									// 高確中累計セーフ数累計
	short	startCounthigh;									// 高確中累計始動数累計
	short	op1Counthigh;									// 高確中累計OP1数累計
	short	op2Counthigh;									// 高確中累計OP2数累計
	short	op3Counthigh;									// 高確中累計OP3数累計
	long	outCounthit;									// 特賞中累計アウト数累計
	long	safeCounthit;									// 特賞中累計セーフ数累計
	short	startCounthit;									// 特賞中累計始動数累計
	short	op1Counthit;									// 特賞中累計OP1数累計
	short	op2Counthit;									// 特賞中累計OP2数累計
	short	op3Counthit;									// 特賞中累計OP3数累計
	short	normalhitCount;									// 通常特賞回数累計
	short	startCountafter;								// 特賞後始動回数
	long	outCountafter;									// 特賞後アウト
	long	safeCountafter;									// 特賞後セーフ
	short	windowCount;									// 窓枠オープン回数累計
	short	windowHitCount;									// 窓枠特賞回数累計
	short	injustice1Count;								// 不正１回数
	short	injustice2Count;								// 不正２回数
	char	padding3[2];									// パディング３
	short	replayBall;										// 各台再プレイ数
	long	ballCount;										// 各台計数数
	long	cashSell;										// 現金売上
	long	cardSell;										// カード売上
	long	cardSaleAmt;									// カード発券金額
	unsigned long	cnd;									// 遊技台状態情報
	BYTE	palseFlg;										// ナスカ再プレイフラグ
	char	padding4[1];									// パディング４
	short	dlOutNormal;									// ディレイ中アウト（通常）
	short	dlOutHigh;										// ディレイ中アウト（高確）
	short	dlOutJitan;										// ディレイ中アウト（時短）
	short	dlSafeNormal;									// ディレイ中セーフ（通常）
	short	dlSafeHigh;										// ディレイ中セーフ（高確）
	short	dlSafeJitan;									// ディレイ中セーフ（時短）
	short	dlStartNormal;									// ディレイ中始動数（通常）
	short	dlStartHigh;									// ディレイ中始動数（高確）
	short	dlStartJitan;									// ディレイ中始動数（時短）
	short	dlOp1Normal;									// ディレイ中OP1回数（通常）
	short	dlOp1High;										// ディレイ中OP1回数（高確）
	short	dlOp1Jitan;										// ディレイ中OP1回数（時短）
	short	dlOp2Normal;									// ディレイ中OP2回数（通常）
	short	dlOp2High;										// ディレイ中OP2回数（高確）
	short	dlOp2Jitan;										// ディレイ中OP2回数（時短）
	short	dlOp3Normal;									// ディレイ中OP3回数（通常）
	short	dlOp3High;										// ディレイ中OP3回数（高確）
	short	dlOp3Jitan;										// ディレイ中OP3回数（時短）
	char	padding5[2];									// パディング５
	long	outCountJitan;									// 時短/AT/CT中累計アウト数累計
	long	safeCountJitan;									// 時短/AT/CT中累計セーフ数累計
	short	startCountJitan;								// 時短/AT/CT中累計始動数累計
	short	op1CountJitan;									// 時短/AT/CT中累計OP1数累計
	short	op2CountJitan;									// 時短/AT/CT中累計OP2数累計
	short	op3CountJitan;									// 時短/AT/CT中累計OP3数累計
	short	jitanCount;										// 時短/AT/CT回数
	short	maxMY;											// 最大獲得
	short	minMY;											// 最大損失
	char	padding6[2];									// パディング６
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ００５電文（計数機情報）											*/
/****************************************************************************/
struct req_su005_data_keisuki_t {
	BYTE	kind;											// 区分
	char	padding1[1];									// パディング１
	short	boardNo;										// 台番号（システムID）
	long	ballCount;										// 計数値
	BYTE	negaCond;										// 断線
	char	padding2[159];									// パディング２
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ００５電文（金庫情報）												*/
/****************************************************************************/
struct req_su005_data_kinko_t {
	BYTE	kind;											// 区分
	char	padding1[1];									// パディング１
	short	boardNo;										// 台番号（システムID）
	long	n100Count;										// 100円カウント
	long	n500Count;										// 500円カウント
	long	n1000Count;										// 1000円カウント
	long	n2000Count;										// 2000円カウント
	long	n5000Count;										// 5000円カウント
	long	n10000Count;									// 10000円カウント
	long	safeboxSell;									// 金庫売上金額
	BYTE	negaCond;										// 断線
	char	padding2[135];									// パディング２
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ００５電文（両替機情報）											*/
/****************************************************************************/
struct req_su005_data_ryogaeki_t {
	BYTE	kind;											// 区分
	char	padding1[1];									// パディング１
	short	boardNo;										// 台番号（システムID）
	long	n10000inCount;									// 10000円入金累計
	long	n5000inCount;									// 5000円入金累計
	long	n1000inCount;									// 1000円入金累計
	long	n500inCount;									// 500円入金累計
	long	n1000outCount;									// 1000円出金累計
	long	n500outCount;									// 500円出金累計
	long	n100outCount;									// 100円出金累計
	BYTE	negaCond;										// 断線
	char	padding2[135];									// パディング２
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ００５電文（券売機情報）											*/
/****************************************************************************/
struct req_su005_data_kenbaiki_t {
	BYTE	kind;											// 区分
	char	padding1[1];									// パディング１
	short	boardNo;										// 台番号（システムID）
	long	premiumCount;									// プレミアム玉貸回数累計
	long	premiumbCount;									// プレミアム玉貸個数累計
	long	colum1Sell;										// コラム１売上枚数累計
	long	colum2Sell;										// コラム２売上枚数累計
	long	colum3Sell;										// コラム３売上枚数累計
	long	colum4Sell;										// コラム４売上枚数累計
	long	colum5Sell;										// コラム５売上枚数累計
	long	SellCount;										// 売上合計枚数
	long	SellAmount;										// 売上合計金額
	BYTE	negaCond;										// 断線
	char	padding2[127];									// パディング２
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ００５電文（外貸機情報）											*/
/****************************************************************************/
struct req_su005_data_gaikashiki_t {
	BYTE	kind;											// 区分
	char	padding1[1];									// パディング１
	short	boardNo;										// 台番号（システムID）
	long	cashSell;										// 現金売上
	long	cardSell;										// カード売上
	BYTE	negaCond;										// 断線
	char	padding2[155];									// パディング２
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ００５電文（精算機情報）											*/
/****************************************************************************/
struct req_su005_data_seisanki_t {
	BYTE	kind;											// 区分
	char	padding1[1];									// パディング１
	short	boardNo;										// 台番号（システムID）
	long	adjustMount;									// 精算金額
	long	n100Count;										// 100円カウント
	long	n500Count;										// 500円カウント
	long	n1000Count;										// 1000円カウント
	BYTE	negaCond;										// 断線
	char	padding2[147];									// パディング２
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ００５電文（発券金庫情報）											*/
/****************************************************************************/
struct req_su005_data_hakkenkinko_t {
	BYTE	kind;											// 区分
	char	padding1[1];									// パディング１
	short	boardNo;										// 台番号（システムID）
	long	n100Count;										// 100円カウント
	long	n500Count;										// 500円カウント
	long	n1000Count;										// 1000円カウント
	long	n2000Count;										// 2000円カウント
	long	n5000Count;										// 5000円カウント
	long	n10000Count;									// 10000円カウント
	long	safeboxSell;									// 金庫売上金額
	BYTE	negaCond;										// 断線
	char	padding2[135];									// パディング２
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ００５電文（要求）データ											*/
/****************************************************************************/
union req_su005_data_t {
	struct {
		BYTE	kind;										// 区分
		char	padding1[1];								// パディング１
		short	boardNo;									// 台番号（システムID）
	}	common;
	req_su005_data_dai_t			dai;					// 台情報
	req_su005_data_keisuki_t		keisuki;				// 計数機情報
	req_su005_data_kinko_t			kinko;					// 金庫情報
	req_su005_data_ryogaeki_t		ryogaeki;				// 両替機情報
	req_su005_data_kenbaiki_t		kenbaiki;				// 券売機情報
	req_su005_data_gaikashiki_t		gaikashiki;			// 外貸機情報
	req_su005_data_seisanki_t		seisanki;				// 精算機情報
	req_su005_data_hakkenkinko_t	hakken_kinko;			// 発券金庫情報
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ００５電文（要求）													*/
/****************************************************************************/
struct req_su005_t {
	long				number;										// 件数
	req_su005_data_t	data;
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ１０１電文（要求）データ											*/
/****************************************************************************/
struct req_su101_data_t {
	short	boardNo;										// 台番号
	short	rirekiCnt;										// 収集履歴番号（From）
};											
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ１０１電文（要求）													*/
/****************************************************************************/
struct req_su101_t {
	long				dataCnt;							// 件数（台数）
	req_su101_data_t	data[1];							// データ（可変）
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ１０１電文（応答）データ											*/
/****************************************************************************/
struct ans_su101_data_t {
	short	boardNo;										// 台番号
	short	rirekiNo;										// 履歴番号
	byte	hitCount;										// 特賞回数
	byte	status;											// 状態フラグ
	byte	hour;											// 発生時
	byte	minute;											// 発生分
	long	outCountNotHitD;								// 特賞外アウト（ディレイあり）
	long	outCountNotHit;									// 特賞外アウト（ディレイなし）
	long	safeCountNotHitD;								// 特賞外セーフ（ディレイあり）
	long	safeCountNotHit;								// 特賞外セーフ（ディレイなし）
	short	startCountNotHitD;								// 特賞外始動数（ディレイあり）
	short	startCountNotHit;								// 特賞外始動数（ディレイなし）
	short	op1CountNotHitD;								// 特賞外ＯＰ１回数（ディレイあり）
	short	op1CountNotHit;									// 特賞外ＯＰ１回数（ディレイなし）
	short	op2CountNotHitD;								// 特賞外ＯＰ２回数（ディレイあり）
	short	op2CountNotHit;									// 特賞外ＯＰ２回数（ディレイなし）
	short	op3CountNotHitD;								// 特賞外ＯＰ３回数（ディレイあり）
	short	op3CountNotHit;									// 特賞外ＯＰ３回数（ディレイなし）
	long	outCountHitD;									// 特賞中アウト（ディレイあり）
	long	outCountHit;									// 特賞中アウト（ディレイなし）
	long	safeCountHitD;									// 特賞中セーフ（ディレイあり）
	long	safeCountHit;									// 特賞中セーフ（ディレイなし）
	short	startCountHitD;									// 特賞中始動数（ディレイあり）
	short	startCountHit;									// 特賞中始動数（ディレイなし）
	short	op1CountHitD;									// 特賞中ＯＰ１回数（ディレイあり）
	short	op1CountHit;									// 特賞中ＯＰ１回数（ディレイなし）
	short	op2CountHitD;									// 特賞中ＯＰ２回数（ディレイあり）
	short	op2CountHit;									// 特賞中ＯＰ２回数（ディレイなし）
	short	op3CountHitD;									// 特賞中ＯＰ３回数（ディレイあり）
	short	op3CountHit;									// 特賞中ＯＰ３回数（ディレイなし）
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ１０１電文（応答）													*/
/****************************************************************************/
struct ans_su101_t {
	long				dataCnt;							// 件数
	ans_su101_data_t	data[1];							// データ部（可変）
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＵ１０２電文（要求）													*/
/****************************************************************************/
struct req_su102_t {
	short	kind;											// 種別区分
	short	boardNo;										// 機器番号
	long	alarmDate;										// アラーム事象発生年月日
	long	alarmTime;										// アラーム事象発生時分秒
	short	alarmNo;										// アラーム事象No.
	short	moneyType;										// 金種･券種
	// ≪以下、事象発生時点の台情報≫	
	long	outCount;										// アウト累計
	long	safeCount;										// セーフ累計
	short	starttCount;									// 始動数累計
	char	padding1[2];									// パディング１
	long	outCountHitD;									// 特賞中アウト（ディレイあり）
	long	outCountHit;									// 特賞中アウト（ディレイなし）
	long	safeCountHitD;									// 特賞中セーフ（ディレイあり）
	long	safeCountHit;									// 特賞中セーフ（ディレイなし）
	short	startCountHitD;									// 特賞中始動数（ディレイあり）
	short	startCountHit;									// 特賞中始動数（ディレイなし）
	long	outCountHighD;									// 高確中アウト（ディレイあり）
	long	outCountHigh;									// 高確中アウト（ディレイなし）
	long	safeCountHighD;									// 高確中セーフ（ディレイあり）
	long	safeCountHigh;									// 高確中セーフ（ディレイなし）
	short	startCountHighD;								// 高確中始動数（ディレイあり）
	short	startCountHigh;									// 高確中始動数（ディレイなし）
	long	outCountJitanD;									// 時短中アウト（ディレイあり）
	long	outCountJitan;									// 時短中アウト（ディレイなし）
	long	safeCountJitanD;								// 時短中セーフ（ディレイあり）
	long	safeCountJitan;									// 時短中セーフ（ディレイなし）
	short	startCountJitanD;								// 時短中始動数（ディレイあり）
	short	startCountJitan;								// 時短中始動数（ディレイなし）
	long	cashSell;										// 現金売上
	long	cardSell;										// カード売上
	// ≪以下、事象発生時点の事象補足項目≫	
	long	reAlarm;										// 再アラーム回数
	long	heniOut;										// 変移アウト
	long	heniSafe;										// 変移セーフ
	long	heniStart;										// 変移始動数
	long	sabunOut;										// アウト差分
	long	sabunSafe;										// セーフ差分
	long	sabunDedama;									// 出玉差分
	long	startCountNotHit;								// 特賞外始動数
	long	findDedama;										// 検出時点特賞出玉
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＱＵＡＲＥ通信データ部（共有）										*/
/****************************************************************************/
union	square_data_t {
	BYTE			raw[4096];
	req_tm001_t		reqTM001;
	req_su001_t		reqSU001;
	ans_su001_t		ansSU001;
	req_su005_t		reqSU005;
	req_su101_t		reqSU101;
	ans_su101_t		ansSU101;
	req_su102_t		reqSU102;
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＱＵＡＲＥ通信電文（共有）											*/
/****************************************************************************/
struct square_msg_t {
	square_header_t		header;
	square_data_t		data;
};
//----------------------------------------------------------------------------
/****************************************************************************/
/*	ＳＱＵＡＲＥ通信電文（共有）											*/
/****************************************************************************/
typedef struct {
	short	kind;											// 種別区分
	short	boardNo;										// 機器番号
	long	alarmDate;										// アラーム事象発生年月日
	long	alarmTime;										// アラーム事象発生時分秒
	short	alarmNo;										// アラーム事象No.
	char	dmy[2];											// 予備
	long	simaNo;											// 島番号
} ALARM_COLLECT_INFO;

#pragma pack(pop)
//----------------------------------------------------------------------------

#endif
//----------------------------------------------------------------------------
/*
 * $Log$
 */
//----------------------------------------------------------------------------
